<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="shortcut icon" type="image/x-icon" href="#" />

    <link rel="preconnect" href="https://fonts.googleapis.com/" />
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/%40tabler/icons-webfont@2.46.0/tabler-icons.min.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

    <link rel="stylesheet" href="/public/styles/adminSideBar.css">
    <style>
        body{
            font-family: 'Inter', sans-serif;
            background-color: #d3d5d6;
        }
        .container{
            max-width: 1000px;
            margin: auto;
            padding-top: 20px;
        }
        .card{
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
            padding: 20px;
        }
        .btn{
            padding: 10px 16px;
            font-size: 14px;
            border-radius: 6px;
            transition: background 0.3s;
        }
        .btn-primary{
            background-color: #ac926c;
            color: #fff;
            border: none;
        }
        .btn-primary:hover{
            background-color: #7c6b52;
        }
        .form-group{
            margin-bottom: 15px;
        }
        label{
            font-weight: 600;
            margin-bottom: 5px;
            display: block;
        }
        input, textarea, select{
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 6px;
        }
        #cropModal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 15px;
            width: 350px; 
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
            text-align: center;
            z-index: 1000;
        }

        #imagePreview {
            max-width: 100%;
            max-height: 250px;
            margin-bottom: 10px;
        }

        #cropButton, #cancelCrop{
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 5px;
        }
        #cropButton{
            background-color: #28a745;
            color: white;
        }
        #cancelCrop{
            background-color: #dc3545;
            color: white;
        }
        
        #cropButton:hover{
            background-color: #218838;
        }
        
        #cancelCrop:hover{
            background-color: #c82333;
        }
        
    </style>
    <title>Casa Vogue - Admin</title>
</head>
<body>
    <div class="main-wrapper">
        <%- include('./partials/sidebar') %>
        <div class="container">
            <div class="grid grid-cols-1 mb-4">
                <div class="flex flex-col md:flex-row md:justify-between md:items-center gap-4">
                    <div>
                        <h2 class="text-xl">Add Product</h2>
                        <nav aria-label="breadcrumb">
                            <ol class="flex flex-wrap">
                                <li class="inline-block text-green-600">
                                    <a href="/home">
                                        Dashboard
                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-slash inline-block mx-2">
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                            <path d="M17 5l-10 14" />
                                        </svg>
                                    </a>
                                </li>
                                <li class="inline-block text-gray-500 active " aria-current="page">Add Product</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>
            <div class="grid grid-cols-1">
                <div class="card">
                    <form action="/add-product" method="POST">
                        <div class="grid grid-cols-10 gap-2">
                            <div class="col-span-10 lg:col-span-6">
                                <div class="form-group">
                                    <label for="productName">Product Name</label>
                                    <input type="text" id="productName" name="productName" >
                                </div>
                            </div>
                            <div class="col-span-12">
                                <div class="form-group" >
                                    <label for="productImages">Product Images</label>
                                    <input type="file" id="productImages" accept="image/*" multiple>
                                </div>
                                <div id="imagePreviewContainer" style="display: flex; gap: 10px;"></div>
                                <div id="cropModal">
                                    <img id="imagePreview"  style="max-width: 100%; height: auto;">
                                    <button id="cropButton">Crop & Upload</button>
                                    <button id="cancelCrop">Cancel</button>
                                </div>
                                <input type="hidden" id="croppedImages" name="croppedImages">
                            </div>
                            <div class="col-span-12 lg:col-span-6">
                                <div class="form-group">
                                    <label for="productCategory">Product Category</label>
                                    <select id="productCategory" name="productCategory">
                                        <option value="" disabled selected>Select</option>
                                        <% categories.forEach((category)=>{ %>
                                            <option value="<%= category._id %>"><%= category.categoryName %></option>
                                        <% }) %>
                                    </select>
                                </div>
                            </div>
                            <div class="col-span-12 lg:col-span-6">
                                <div class="form-group">
                                    <label for="productMaterial">Product Material</label>
                                    <input type="text" id="productMaterial" name="productMaterial">
                                </div>
                            </div>
                            <div class="col-span-12">
                                <div class="form-group">
                                    <label for="description">Description</label>
                                    <textarea id="description" name="description" rows="3"></textarea>
                                </div>
                            </div>
                            <div class="col-span-12 lg:col-span-6">
                                <div class="form-group">
                                    <label for="productStyle">Product Style</label>
                                    <input type="text" id="productStyle" name="productStyle" >
                                </div>
                            </div>
                            <div class="col-span-12 lg:col-span-6">
                                <div class="form-group">
                                    <label for="price">Price</label>
                                    <input type="number" id="price" name="price" >
                                </div>
                            </div>
                            <div class="col-span-12 lg:col-span-6">
                                <div class="form-group">
                                    <label for="isListed">Is Listed</label>
                                    <select id="isListed" name="isListed">
                                        <option value="true" selected>Yes</option>
                                        <option value="false">No</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-span-12 gap-5">
                                <button type="submit" class="btn btn-primary">Add</button>
                                <a href="/products" class="btn btn-secondary">Cancel</a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script>
    let cropper;
    const imageInput = document.getElementById("productImages");
    const imagePreview = document.getElementById("imagePreview");
    const cropModal = document.getElementById("cropModal");
    const cropButton = document.getElementById("cropButton");
    const cancelCrop = document.getElementById("cancelCrop");
    const croppedImageInput = document.getElementById("croppedImages");
    const imagePreviewContainer = document.getElementById("imagePreviewContainer");
    const croppedPreviewContainer = document.getElementById("croppedPreviewContainer"); // Added for cropped images

    let selectedFiles = [];
    let currentImageIndex = 0;
    let croppedImages = [];

    document.addEventListener("DOMContentLoaded", function () {
        if (imageInput) {
            imageInput.addEventListener("change", function (event) {
                selectedFiles = Array.from(event.target.files);

                if (selectedFiles.length > 4) {
                    alert("You can only select up to 4 images.");
                    event.target.value = ""; 
                    selectedFiles = [];
                    return;
                }

                imagePreviewContainer.innerHTML = "";
                croppedPreviewContainer.innerHTML = ""; // Clear cropped preview when new images are selected
                croppedImages = new Array(selectedFiles.length).fill(null); // Reset cropped images array

                selectedFiles.forEach((file, index) => {
                    if (!file.type.startsWith("image/")) return;

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const img = document.createElement("img");
                        img.src = e.target.result;
                        img.style.width = "100px";
                        img.style.height = "100px";
                        img.style.cursor = "pointer";
                        img.setAttribute("data-index", index);
                        img.onclick = function () {
                            currentImageIndex = index;
                            openCropModal(e.target.result);
                        };
                        imagePreviewContainer.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                });
            });
        }

        function openCropModal(imageSrc) {
            if (!cropModal || !imagePreview) return;
            imagePreview.src = imageSrc;
            cropModal.style.display = "block";

            if (cropper) cropper.destroy();
            cropper = new Cropper(imagePreview, {
                aspectRatio: 1,
                viewMode: 2,
                autoCropArea: 0.9,
                responsive: true,
                zoomable: false,
                scalable: false,
                movable: false
            });
        }

        if (cropButton) {
            cropButton.addEventListener("click", function () {
                if (!cropper) return;
                const croppedCanvas = cropper.getCroppedCanvas();
                if (croppedCanvas) {
                    const croppedData = croppedCanvas.toDataURL();
                    croppedImages[currentImageIndex] = croppedData;
                    cropModal.style.display = "none";
                    
                    // Ensure all images are cropped before submission
                    if (croppedImages.filter(Boolean).length < selectedFiles.length) {
                        alert("Make sure to crop all selected images before submitting.");
                    }

                    croppedImageInput.value = JSON.stringify(croppedImages.filter(Boolean));
                    updateCroppedPreview(); // Show cropped images
                }
            });
        }

        if (cancelCrop) {
            cancelCrop.addEventListener("click", function () {
                if (cropModal) cropModal.style.display = "none";
            });
        }

        function updateCroppedPreview() {
            croppedPreviewContainer.innerHTML = ""; // Clear existing preview
            croppedImages.forEach((image, index) => {
                if (image) {
                    const img = document.createElement("img");
                    img.src = image;
                    img.style.width = "100px";
                    img.style.height = "100px";
                    img.style.margin = "5px";
                    img.setAttribute("data-index", index);
                    croppedPreviewContainer.appendChild(img);
                }
            });
        }

        async function loadCategories() {
            try {
                console.log("Fetching categories...");
                const response = await axios.get("/api/categories");
                console.log("Fetched Categories:", response.data);

                const categoryDropdown = document.getElementById("productCategory");
                if (!categoryDropdown) return; 

                categoryDropdown.innerHTML = "";
                if (response.data.length > 0) {
                    response.data.forEach(category => {
                        let option = document.createElement("option");
                        option.value = category._id;
                        option.textContent = category.name;
                        categoryDropdown.appendChild(option);
                    });
                } else {
                    let option = document.createElement("option");
                    option.textContent = "No categories found";
                    option.disabled = true;
                    categoryDropdown.appendChild(option);
                }
            } catch (error) {
                console.error("Error fetching categories:", error);
            }
        }

        loadCategories();
    });
</script>

</body>
</html>
